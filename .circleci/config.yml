defaults: &defaults
  docker:
    - image: cimg/base:stable

version: 2.1

commands:
  build-and-push-image:
    parameters:
      tag-prefix:
        description: Prefix to be added before the tag.
        type: string
        default: ""
      dockerfile-path:
        description: Path to the Dockerfile
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build image
          command: |
            export TAG="$(git describe --tags --abbrev=10)"
            docker build images/ -f << parameters.dockerfile-path >> \
              -t "quay.io/rhacs-eng/apollo-ci:snapshot-<< parameters.tag-prefix >>$TAG" \
              -t "quay.io/rhacs-eng/apollo-ci:<< parameters.tag-prefix >>$TAG"

      - run:
          name: Push image
          command: |
            docker login -u "$QUAY_RHACS_ENG_RW_USERNAME" -p "$QUAY_RHACS_ENG_RW_PASSWORD" quay.io

            export TAG="<< parameters.tag-prefix >>$(git describe --tags --abbrev=10)"
            if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
              echo "Pushing release image"
              image_to_push="quay.io/rhacs-eng/apollo-ci:$TAG"
            else
              echo "Pushing snapshot image"
              image_to_push="quay.io/rhacs-eng/apollo-ci:snapshot-$TAG"
            fi
            docker push "${image_to_push}" | cat
            echo "${image_to_push}" > /tmp/pushed_image

      - persist_to_workspace:
          root: /tmp
          paths:
            - pushed_image

jobs:
  build-and-push-rox:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/rox.Dockerfile

  create-or-update-dependent-rox-pr:
    <<: *defaults
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "c7:dd:37:f0:33:4b:a1:16:80:d6:56:48:fd:d3:6c:87"
    - attach_workspace:
        at: /tmp

    - run:
        name: Clone stackrox repo
        command: |
          git clone git@github.com:stackrox/stackrox.git /tmp/stackrox

    - run:
        name: Create commit in stackrox that updates the base image
        working_directory: /tmp/stackrox
        command: |
          pushed_image="$(cat /tmp/pushed_image)"
          [[ -n "${pushed_image}" ]]
          echo "Pushed image: ${pushed_image}"

          git config user.email "roxbot@stackrox.com"
          git config user.name "RoxBot"

          branch_name="roxbot/update-ci-image-from-${CIRCLE_PULL_REQUEST##*/}"
          if git fetch --quiet origin "${branch_name}"; then
            git checkout "${branch_name}"
            git pull --quiet --set-upstream origin "${branch_name}"
          else
            git checkout -b "${branch_name}"
            git push --set-upstream origin "${branch_name}"
            git reset --hard origin/HEAD
          fi

          sed -i 's@quay.io/rhacs-eng/apollo-ci:.*@'"${pushed_image}"' # TODO(do not merge): After upstream PR is merged, cut a tag and update this@g' .circleci/config.yml
          git commit -am "Bump base image to ${pushed_image##:}"
          git push origin "${branch_name}"

    - run:
        name: Create PR
        command: |
          branch_name="roxbot/update-ci-image-from-${CIRCLE_PULL_REQUEST##*/}"
          .circleci/create_update_pr_rox.sh "${branch_name}"

  build-and-push-test-cci-export:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/test.cci-export.Dockerfile
          tag-prefix: "test-cci-export-"

  run-test-cci-export:
    machine:
      image: ubuntu-2004:202111-01
    resource_class: medium
    steps:
    - checkout
    - run:
        name: Login to quay.io
        command: |
          docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" --password-stdin \<<<"$QUAY_RHACS_ENG_RO_PASSWORD" quay.io
    - run:
        name: Test cci-export
        command: |
          export TAG="$(git describe --tags --abbrev=10)"
          tag_prefix="snapshot-test-cci-export-"
          if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
            tag_prefix="test-cci-export-"
          fi
          docker run "quay.io/rhacs-eng/apollo-ci:${tag_prefix}${TAG}"

  build-and-push-env-check:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/env-check.Dockerfile
          tag-prefix: "env-check-"

  unit-test-env-check:
    machine:
      image: ubuntu-2004:202111-01
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Login to quay.io
          command: |
            docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" --password-stdin \<<<"$QUAY_RHACS_ENG_RO_PASSWORD" quay.io

      - run:
          name: Run unit tests for circleci-tools using the built image
          command: |
            export TAG="$(git describe --tags --abbrev=10)"
            tag_prefix="snapshot-env-check-"
            if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
              tag_prefix="env-check-"
            fi
            export IMAGE="quay.io/rhacs-eng/apollo-ci:${tag_prefix}${TAG}"
            docker pull "$IMAGE"
            images/circleci-tools/test/test.bats

  check-env-for-sensitive-values:
    machine:
      image: ubuntu-2004:202111-01
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Login to quay.io
          command: |
            docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" --password-stdin \<<<"$QUAY_RHACS_ENG_RO_PASSWORD" quay.io

      - run:
          name: Check build output using the built image
          command: |
            export TAG="$(git describe --tags --abbrev=10)"
            tag_prefix="snapshot-env-check-"
            if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
              tag_prefix="env-check-"
            fi
            export IMAGE="quay.io/rhacs-eng/apollo-ci:${tag_prefix}${TAG}"
            export CIRCLECI_TOKEN="$CIRCLE_TOKEN_ROXBOT"
            docker pull "$IMAGE"

            docker run --rm \
              -e CIRCLECI_TOKEN -e CIRCLE_WORKFLOW_ID \
              -e CIRCLE_PROJECT_REPONAME -e CIRCLE_BUILD_NUM \
              "$IMAGE" poll-for-workflow-completion.js 1800

            scratch="$(mktemp -d)"
            output_dir="$scratch/builds"
            mkdir -p "$output_dir"
            docker run -u "$(id -u):$(id -g)" --rm \
              -e CIRCLECI_TOKEN -e CIRCLE_WORKFLOW_ID \
              -e CIRCLE_PROJECT_REPONAME -e CIRCLE_BUILD_NUM \
              -v "$scratch":"$scratch":z \
              "$IMAGE" pull-workflow-output.js "$output_dir"

            env_file="$scratch/check.env"
            env > "$env_file"
            docker run -u "$(id -u):$(id -g)" --rm \
              -v "$scratch":"$scratch":z \
              "$IMAGE" check-for-sensitive-env-values.js -e "$env_file" -b "$output_dir"
            rm "$env_file"

  build-and-push-collector:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/collector.Dockerfile
          tag-prefix: "collector-"

  build-and-push-jenkins-plugin:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/jenkins-plugin.Dockerfile
          tag-prefix: "jenkins-plugin-"

workflows:
  version: 2
  build:
    jobs:
    - build-and-push-test-cci-export:
        context: quay-rhacs-eng-readwrite
        filters:
          tags:
            only: /.*/
    - run-test-cci-export:
        context: quay-rhacs-eng-readonly
        requires:
        - build-and-push-test-cci-export
    - build-and-push-rox:
        context: quay-rhacs-eng-readwrite
        filters:
          tags:
            only: /.*/
        requires:
        - run-test-cci-export
    - create-or-update-dependent-rox-pr:
        filters:
          branches:
            ignore: master
        requires:
        - build-and-push-rox
    - build-and-push-env-check:
        context: quay-rhacs-eng-readwrite
        filters:
          tags:
            only: /.*/
    - unit-test-env-check:
        context: quay-rhacs-eng-readonly
        requires:
        - build-and-push-env-check
    - check-env-for-sensitive-values:
        context:
          - quay-rhacs-eng-readonly
          - quay-rhacs-eng-readwrite
        requires:
        - unit-test-env-check
        - build-and-push-rox
    - build-and-push-collector:
        context: quay-rhacs-eng-readwrite
        filters:
          tags:
            only: /.*/
    - build-and-push-jenkins-plugin:
        context: quay-rhacs-eng-readwrite
        filters:
          tags:
            only: /.*/
