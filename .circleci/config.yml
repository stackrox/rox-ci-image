defaults: &defaults
  docker:
    - image: cimg/base:stable

version: 2.1

orbs:
  bats: circleci/bats@1.0.0

commands:
  open-test-pr:
    parameters:
      repo:
        description: Name of the repo where the PR should be opened.
        type: string
      labels:
        description: Space separated list of PR labels to add.
        type: string
      image-flavors:
        description: The flavors of the apollo-ci image that the target repo uses. A comma separated list.
        type: string
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c7:dd:37:f0:33:4b:a1:16:80:d6:56:48:fd:d3:6c:87"
      - run:
          name: Clone << parameters.repo >> repo
          command: |
            git clone git@github.com:stackrox/<< parameters.repo >>.git /tmp/<< parameters.repo >>
      - run:
          name: Create a commit in << parameters.repo >> that updates dependent images if necessary
          command: |
            if ! .circleci/changes_affect.sh << parameters.repo >>; then
              echo "No need to open/update a PR against << parameters.repo >> - current changes are not affecting this repo."
              exit 0;
            fi

            pushd "/tmp/<< parameters.repo >>"

            git config user.email "roxbot@stackrox.com"
            git config user.name "RoxBot"
            branch_name="roxbot/update-ci-image-from-${CIRCLE_PULL_REQUEST##*/}"
            if git fetch --quiet origin "${branch_name}"; then
              git checkout "${branch_name}"
              git pull --quiet --set-upstream origin "${branch_name}"
            else
              git checkout -b "${branch_name}"
              # The first commit is created to allow opening a PR and setting all required labels before we trigger the CI
              git commit --allow-empty -am "Noop commit [ci skip]"
              git push --set-upstream origin "${branch_name}"
            fi

            todo="# TODO(do not merge): After upstream PR is merged, cut a tag and update this"

            IFS=',' read -r -a flavors \<<<"<< parameters.image-flavors >>"
            for flavor in "${flavors[@]}"; do
              echo "Doing image substitutions for $flavor"
              prefix="$flavor-"
              popd
              tag="$(.circleci/get_tag.sh "$flavor")"

              # Open or update a PR and configure labels, assignees - this must happen before pushing code changes to the branch
              .circleci/create_update_pr.sh \
                "${branch_name}" \
                "<< parameters.repo >>" \
                "Update apollo-ci image" \
                "Bump version of apollo-ci image used in CircleCI" \
                "<< parameters.labels >>"

              pushd "/tmp/<< parameters.repo >>"

              sed -r -i "s@(.*)/apollo-ci:${prefix}[0-9].*@\1/apollo-ci:${tag} ${todo}@g" .circleci/config.yml

              # If the image parameter was originally quoted, we need to close the quote
              sed -r -i "s@\"(.*)/apollo-ci:${tag} # TODO@\"\1/apollo-ci:${tag}\" # TODO@g" .circleci/config.yml

              if [[ "$flavor" == "stackrox-build" ]] && [[ "<< parameters.repo >>" == "stackrox" ]]; then
                echo "${tag} ${todo}" > BUILD_IMAGE_VERSION
                git add BUILD_IMAGE_VERSION
              fi

              if git diff-files --quiet; then
                echo "There are no changes to commit in the dependent repo"
              else
                printf "Committing diff:\n%s\n---End of diff" "$(git diff-files -p)"
                # It may happen that the diff is empty and we still land in this if-branch (not sure why),
                # thus adding `--allow-empty` to not fail the commiting in such cases
                git commit --allow-empty -am "Bump apollo-ci:$flavor image tag to ${tag##:}"
                git push origin "${branch_name}"
              fi
            done

  build-and-push-image:
    parameters:
      image-flavor:
        description: A flavor used to tag the apollo-ci image.
        type: string
      dockerfile-path:
        description: Path to the Dockerfile
        type: string
      builds-on:
        description: The image flavor to build upon. Passed to the dockerfile as BASE_ARG.
        type: string
        default: ""
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build & push image
          command: |
            # Login may be required for pulling the base image for building (if used) and to omit the rate limit
            docker login -u "$DOCKER_IO_PULL_USERNAME" -p "$DOCKER_IO_PULL_PASSWORD" docker.io
            docker login -u "$QUAY_RHACS_ENG_RW_USERNAME" -p "$QUAY_RHACS_ENG_RW_PASSWORD" quay.io

            BUILD_ARGS=(--build-arg GITHUB_TOKEN="${GITHUB_TOKEN}")
            if [[ -n "<< parameters.builds-on >>" ]]; then
              BASE_TAG="$(.circleci/get_tag.sh "<< parameters.builds-on >>")"
              BUILD_ARGS+=(--build-arg "BASE_TAG=$BASE_TAG")
            fi

            CENTOS_TAG="$(cat CENTOS_TAG)"
            BUILD_ARGS+=(--build-arg "CENTOS_TAG=${CENTOS_TAG}")

            BUILD_ARGS+=(--build-arg "ROCKSDB_TAG=$(.circleci/get_tag.sh rocksdb "${CENTOS_TAG}")")

            TAG="$(.circleci/get_tag.sh "<< parameters.image-flavor >>" "${CENTOS_TAG}")"
            IMAGE="quay.io/rhacs-eng/apollo-ci:${TAG}"

            if [[ "<< parameters.image-flavor >>" == "rocksdb" ]] && \
                   DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "$IMAGE" >/dev/null; then
              echo "Image '$IMAGE' already exists - no need to build it"
              circleci step halt
              exit 0
            fi

            docker build \
              "${BUILD_ARGS[@]}" \
              -f << parameters.dockerfile-path >> \
              -t "${IMAGE}" \
              images/

            for i in {1..5}; do
              docker push "quay.io/rhacs-eng/apollo-ci:${TAG}" && break || sleep 15
            done

  check-image:
    parameters:
      image-flavor:
        description: The flavor of apollo-ci image to check.
        type: string
    steps:
      - run:
          name: Get roxctl
          command: |
            curl -k -H "Authorization: Bearer $ROX_API_TOKEN" https://$STACKROX_CENTRAL_HOST:443/api/cli/download/roxctl-linux -o roxctl
            chmod +x ./roxctl
      - run:
          name: Scan images for policy deviations and vulnerabilities
          command: |
            TAG="$(.circleci/get_tag.sh "<< parameters.image-flavor >>")"
            ./roxctl image check --endpoint "$STACKROX_CENTRAL_HOST:443" --image "quay.io/rhacs-eng/apollo-ci:${TAG}"

jobs:
  build-and-push-rocksdb:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/rocksdb.Dockerfile
          image-flavor: "rocksdb"

  build-and-push-stackrox-build:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/stackrox-build.Dockerfile
          image-flavor: "stackrox-build"
      - check-image:
          image-flavor: "stackrox-build"

  build-and-push-stackrox-test:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/stackrox-test.Dockerfile
          image-flavor: "stackrox-test"
          builds-on: "stackrox-build"
      - check-image:
          image-flavor: "stackrox-test"

  build-and-push-stackrox-test-cci:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/circleci.Dockerfile
          image-flavor: "stackrox-test-cci"
          builds-on: "stackrox-test"
      - check-image:
          image-flavor: "stackrox-test-cci"

  test-cci-export:
    <<: *defaults
    resource_class: medium
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Test cci-export inside Docker
        command: |
          docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" --password-stdin \<<<"$QUAY_RHACS_ENG_RO_PASSWORD" quay.io
          BASE_TAG="$(.circleci/get_tag.sh stackrox-test-cci)"

          docker build \
            --build-arg BASE_TAG="$BASE_TAG" \
            -f images/test.cci-export.Dockerfile \
            -t test.cci-export \
            images/
          docker run --rm test.cci-export

  build-and-push-env-check:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/env-check.Dockerfile
          image-flavor: "env-check"
      - check-image:
          image-flavor: "env-check"

  unit-test-env-check:
    machine:
      image: ubuntu-2004:202111-01
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Login to quay.io
          command: |
            docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" --password-stdin \<<<"$QUAY_RHACS_ENG_RO_PASSWORD" quay.io

      - run:
          name: Run unit tests for circleci-tools using the built image
          command: |
            TAG="$(.circleci/get_tag.sh "env-check")"
            export IMAGE="quay.io/rhacs-eng/apollo-ci:${TAG}"
            docker pull "$IMAGE"
            images/circleci-tools/test/test.bats

  check-env-for-sensitive-values:
    machine:
      image: ubuntu-2004:202111-01
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Login to quay.io
          command: |
            docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" --password-stdin \<<<"$QUAY_RHACS_ENG_RO_PASSWORD" quay.io

      - run:
          name: Check build output using the built image
          command: |
            TAG="$(.circleci/get_tag.sh "env-check")"
            export IMAGE="quay.io/rhacs-eng/apollo-ci:${TAG}"
            export CIRCLECI_TOKEN="$CIRCLE_TOKEN_ROXBOT"
            docker pull "$IMAGE"

            docker run --rm \
              -e CIRCLECI_TOKEN -e CIRCLE_WORKFLOW_ID \
              -e CIRCLE_PROJECT_REPONAME -e CIRCLE_BUILD_NUM \
              "$IMAGE" poll-for-workflow-completion.js 1800

            scratch="$(mktemp -d)"
            output_dir="$scratch/builds"
            mkdir -p "$output_dir"
            docker run -u "$(id -u):$(id -g)" --rm \
              -e CIRCLECI_TOKEN -e CIRCLE_WORKFLOW_ID \
              -e CIRCLE_PROJECT_REPONAME -e CIRCLE_BUILD_NUM \
              -v "$scratch":"$scratch":z \
              "$IMAGE" pull-workflow-output.js "$output_dir"

            env_file="$scratch/check.env"
            env > "$env_file"
            docker run -u "$(id -u):$(id -g)" --rm \
              -v "$scratch":"$scratch":z \
              "$IMAGE" check-for-sensitive-env-values.js -e "$env_file" -b "$output_dir"
            rm "$env_file"

  build-and-push-collector:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/collector.Dockerfile
          image-flavor: "collector"
      - check-image:
          image-flavor: "collector"

  build-and-push-jenkins-plugin:
    <<: *defaults
    steps:
      - build-and-push-image:
          dockerfile-path: images/jenkins-plugin.Dockerfile
          image-flavor: "jenkins-plugin"
      - check-image:
          image-flavor: "jenkins-plugin"

  create-or-update-stackrox-repo-pr:
    <<: *defaults
    steps:
      - open-test-pr:
          repo: stackrox
          labels: "ci-upgrade-tests"
          image-flavors: "stackrox-build,stackrox-test-cci"

  create-or-update-scanner-repo-pr:
    <<: *defaults
    steps:
      - open-test-pr:
          repo: scanner
          labels: "generate-dumps-on-pr"
          image-flavors: "stackrox-test-cci"

  create-or-update-collector-repo-pr:
    <<: *defaults
    steps:
      - open-test-pr:
          repo: collector
          image-flavors: "collector"

  create-or-update-jenkins-plugin-repo-pr:
    <<: *defaults
    steps:
      - open-test-pr:
          repo: jenkins-plugin
          image-flavors: "jenkins-plugin"

workflows:
  version: 2
  build:
    jobs:
    - bats/run:
        path: ./test/bats
        filters:
          tags:
            only: /.*/
    - build-and-push-rocksdb:
        context: &buildPushContext
          - quay-rhacs-eng-readwrite
          - docker-io-pull
        filters:
          tags:
            only: /.*/
        requires:
        - bats/run
    - build-and-push-stackrox-build:
        context: &buildPushCheckContext
          - quay-rhacs-eng-readwrite
          - stackrox-ci-instance
          - docker-io-pull
        filters:
          tags:
            only: /.*/
        requires:
        - build-and-push-rocksdb
    - build-and-push-stackrox-test:
        context:
          *buildPushCheckContext
        filters:
          tags:
            only: /.*/
        requires:
        - build-and-push-stackrox-build
    - build-and-push-stackrox-test-cci:
        context:
          *buildPushCheckContext
        filters:
          tags:
            only: /.*/
        requires:
        - build-and-push-stackrox-test
    - test-cci-export:
        context: quay-rhacs-eng-readonly
        filters:
          tags:
            only: /.*/
        requires:
        - build-and-push-stackrox-test-cci
    - build-and-push-env-check:
        context:
          *buildPushCheckContext
        filters:
          tags:
            only: /.*/
        requires:
        - bats/run
    - unit-test-env-check:
        context: quay-rhacs-eng-readonly
        requires:
        - build-and-push-env-check
    - check-env-for-sensitive-values:
        context:
          - quay-rhacs-eng-readonly
          - quay-rhacs-eng-readwrite
        requires:
        - unit-test-env-check
        - build-and-push-stackrox-test-cci
    - build-and-push-collector:
        context:
          *buildPushCheckContext
        filters:
          tags:
            only: /.*/
        requires:
        - bats/run
    - build-and-push-jenkins-plugin:
        context:
          *buildPushCheckContext
        filters:
          tags:
            only: /.*/
        requires:
        - bats/run
    - create-or-update-collector-repo-pr:
        filters:
          branches:
            ignore: master
        requires:
        - build-and-push-collector
    - create-or-update-stackrox-repo-pr:
        filters:
          branches:
            ignore: master
        requires:
        - build-and-push-stackrox-build
        - build-and-push-stackrox-test-cci
    - create-or-update-scanner-repo-pr:
        filters:
          branches:
            ignore: master
        requires:
        - build-and-push-stackrox-test-cci
    - create-or-update-jenkins-plugin-repo-pr:
        filters:
          branches:
            ignore: master
        requires:
        - build-and-push-jenkins-plugin
