FROM ubuntu:18.04

# This line makes sure that piped commands in RUN instructions exit early.
# This should not affect use in CircleCI because Circle doesn't use
# CMD/ENTRYPOINT.
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Configure all necessary apt repositories
RUN set -ex \
 && apt-get update \
 && apt-get install --no-install-recommends -y \
      apt-transport-https=1.6.6ubuntu0.1 \
      ca-certificates=20180409 \
      gnupg2=2.2.4-1ubuntu1.2 \
      wget=1.19.4-1ubuntu2.2 \
      # Required in scanner
      rpm \
      lsb-core \
 && wget --no-verbose -O - https://deb.nodesource.com/setup_10.x | bash - \
 && wget --no-verbose -O - https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
 && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
 && echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list \
 && apt-get remove -y \
      apt-transport-https \
      gnupg2 \
      lsb-core \
 && apt-get autoremove -y \
 && rm -rf /var/lib/apt/lists/*

# Install all the packages
RUN set -ex \
 && apt-get update \
 && apt-get install --no-install-recommends -y \
      build-essential \
      curl \
      git \
      lsof \
      openjdk-8-jdk-headless=8u222-b10-1ubuntu1~18.04.1 \
      # Note that the nodejs version is determined by which of the scripts from deb.nodesource.com
      # we execute in the previous job. See https://github.com/nodesource/distributions/blob/master/README.md#deb
      nodejs \
      unzip \
      # used in scanner
      postgresql-client-12 \
      yarn=1.10.1-1 \
      `# gcloud SDK dependencies:` \
      python2.7-minimal \
      libpython-stdlib \
      `# OpenShift deployment dependencies:` \
      openssh-client \
      `# Cypress dependencies:` \
      xvfb \
      libgtk-3-0 \
      libnotify-dev \
      libgconf-2-4 \
      libnss3 \
      libxss1 \
      libasound2 \
      xxd \
      sudo \
      `# For envsubst:` \
      gettext \
      zip \
 && rm -rf /var/lib/apt/lists/*

# Install jq
RUN curl -L --output jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \
  && chmod +x ./jq \
  && sudo mv ./jq /usr/bin \
  && command -v jq

# Configure CircleCI user
RUN set -ex \
 && groupadd --gid 3434 circleci \
 && useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci \
 && echo 'circleci ALL=NOPASSWD: ALL' > /etc/sudoers.d/50-circleci

# Install docker binary
ARG DOCKER_VERSION=18.06.1-ce
RUN set -ex \
 && DOCKER_URL="https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz" \
 && echo Docker URL: $DOCKER_URL \
 && wget --no-verbose -O /tmp/docker.tgz "${DOCKER_URL}" \
 && ls -lha /tmp/docker.tgz \
 && tar -xz -C /tmp -f /tmp/docker.tgz \
 && install /tmp/docker/docker /usr/local/bin \
 && rm -rf /tmp/docker /tmp/docker.tgz \
 && command -v docker \
 && (docker version --format '{{.Client.Version}}' || true)

# Install Go
# https://golang.org/dl/
ARG GOLANG_VERSION=1.13.4
ARG GOLANG_SHA256=692d17071736f74be04a72a06dab9cac1cd759377bd85316e52b2227604c004c
ENV GOPATH=/go
ENV PATH=$GOPATH/bin:/usr/local/go/bin:$PATH
RUN set -ex \
 && url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz" \
 && wget --no-verbose -O go.tgz "$url" \
 && echo "${GOLANG_SHA256} *go.tgz" | sha256sum -c - \
 && tar -C /usr/local -xzf go.tgz \
 && rm go.tgz \
 && command -v go \
 && mkdir -p "$GOPATH/src" "$GOPATH/bin" \
 && chmod -R 777 "$GOPATH" \
 && chown -R circleci "$GOPATH"

# Install gcloud
# gcloud prefers to run out of a user's home directory.
ARG GCLOUD_VERSION=253.0.0
ARG GCLOUD_SHA256=df3834e538025b257b7cc5d6e7518ca16f05e99aa82671dda19045e688b5268a
ENV PATH=/home/circleci/google-cloud-sdk/bin:$PATH
RUN set -ex \
 && wget --no-verbose -O /tmp/gcloud.tgz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_VERSION}-linux-x86_64.tar.gz \
 && echo "${GCLOUD_SHA256} */tmp/gcloud.tgz" | sha256sum -c - \
 && mkdir -p /home/circleci/google-cloud-sdk \
 && tar -xz -C /home/circleci -f /tmp/gcloud.tgz \
 && /home/circleci/google-cloud-sdk/install.sh \
 && chown -R circleci /home/circleci/google-cloud-sdk \
 && rm -rf /tmp/gcloud.tgz \
 && command -v gcloud \
 && gcloud components install beta

# kubectl
RUN set -ex \
 && wget --no-verbose -O kubectl "https://storage.googleapis.com/kubernetes-release/release/v1.13.3/bin/linux/amd64/kubectl" \
 && install ./kubectl /usr/local/bin \
 && rm kubectl \
 && mkdir -p /home/circleci/.kube \
 && touch /home/circleci/.kube/config \
 && chown -R circleci /home/circleci/.kube/ \
 && command -v kubectl

# oc
RUN set -ex \
 && wget --no-verbose -O oc.tgz https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz \
 && tar -xf oc.tgz \
 && install openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc /usr/local/bin \
 && rm -rf openshift-* oc.tgz \
 && command -v oc

# helm
RUN set -ex \
 && wget --no-verbose -O helm.tgz https://storage.googleapis.com/kubernetes-helm/helm-v2.12.0-linux-amd64.tar.gz \
 && tar -xf helm.tgz \
 && install linux-amd64/helm /usr/local/bin \
 && rm -rf helm.tgz linux-amd64 \
 && command -v helm

# Install gradle
ARG GRADLE_VERSION=5.4.1
ENV PATH=$PATH:/opt/gradle/bin
RUN set -ex \
 && wget --no-verbose https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip \
 && mkdir /opt/gradle \
 && unzip -q gradle-${GRADLE_VERSION}-bin.zip \
 && mv gradle-${GRADLE_VERSION}/* /opt/gradle \
 && rm gradle-${GRADLE_VERSION}-bin.zip \
 && command -v gradle

COPY ./static-contents/ /
RUN \
	mv /bin/bash /bin/real-bash && \
	mv /bin/bash-wrapper /bin/bash

USER circleci
